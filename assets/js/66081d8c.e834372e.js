"use strict";(self.webpackChunkhscodev=self.webpackChunkhscodev||[]).push([[424],{6106:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return m},default:function(){return u}});var l=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],r={sidebar_position:3},s="Asynchronous Flow",p={unversionedId:"kotlin/coroutine/asyncronous_flow",id:"kotlin/coroutine/asyncronous_flow",isDocsHomePage:!1,title:"Asynchronous Flow",description:"suspend \ud568\uc218\ub294 \ub2e8\uc77c \uac12\uc744 \ube44\ub3d9\uae30\uc801\uc73c\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4. flow\ub294 \uacc4\uc0b0\ub41c \uc5ec\ub7ec \uac12\uc744 \ube44\ub3d9\uae30\uc801\uc73c\ub85c \ubc18\ud658\ubc1b\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.",source:"@site/docs/kotlin/coroutine/asyncronous_flow.md",sourceDirName:"kotlin/coroutine",slug:"/kotlin/coroutine/asyncronous_flow",permalink:"/docs/kotlin/coroutine/asyncronous_flow",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"kotlinSidebar",previous:{title:"Coroutine context and dispatchers",permalink:"/docs/kotlin/coroutine/coroutine_context_and_dispatchers"}},m=[{value:"<strong>Representing multiple values</strong>",id:"representing-multiple-values",children:[{value:"<strong>Sequences</strong>",id:"sequences",children:[],level:3},{value:"<strong>Suspending functions</strong>",id:"suspending-functions",children:[],level:3},{value:"Flows",id:"flows",children:[],level:3}],level:2},{value:"Flow are cold",id:"flow-are-cold",children:[],level:2},{value:"<strong>Flow cancellation basics</strong>",id:"flow-cancellation-basics",children:[],level:2},{value:"<strong>Flow builders</strong>",id:"flow-builders",children:[],level:2},{value:"<strong>Intermediate flow operators</strong>",id:"intermediate-flow-operators",children:[],level:2},{value:"<strong>Transform operator</strong>",id:"transform-operator",children:[],level:2},{value:"<strong>Size-limiting operators</strong>",id:"size-limiting-operators",children:[],level:2},{value:"<strong>Terminal flow operators</strong>",id:"terminal-flow-operators",children:[],level:2},{value:"<strong>Flows are sequential</strong>",id:"flows-are-sequential",children:[],level:2},{value:"<strong>Flow context</strong>",id:"flow-context",children:[{value:"<strong>Wrong emission withContext</strong>",id:"wrong-emission-withcontext",children:[],level:3},{value:"<strong>flowOn operator</strong>",id:"flowon-operator",children:[],level:3}],level:2},{value:"<strong>Buffering</strong>",id:"buffering",children:[{value:"<strong>Conflation</strong>",id:"conflation",children:[],level:3},{value:"<strong>Processing the latest value</strong>",id:"processing-the-latest-value",children:[],level:3}],level:2},{value:"<strong>Composing multiple flows</strong>",id:"composing-multiple-flows",children:[{value:"<strong>Zip</strong>",id:"zip",children:[],level:3},{value:"<strong>Combine</strong>",id:"combine",children:[],level:3}],level:2},{value:"<strong>Flattening flows</strong>",id:"flattening-flows",children:[{value:"<strong>flatMapConcat</strong>",id:"flatmapconcat",children:[],level:3},{value:"<strong>flatMapMerge</strong>",id:"flatmapmerge",children:[],level:3},{value:"<strong>flatMapLatest</strong>",id:"flatmaplatest",children:[],level:3}],level:2}],c={toc:m};function u(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,l.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"asynchronous-flow"},"Asynchronous Flow"),(0,o.kt)("p",null,"suspend \ud568\uc218\ub294 \ub2e8\uc77c \uac12\uc744 \ube44\ub3d9\uae30\uc801\uc73c\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4. flow\ub294 \uacc4\uc0b0\ub41c \uc5ec\ub7ec \uac12\uc744 \ube44\ub3d9\uae30\uc801\uc73c\ub85c \ubc18\ud658\ubc1b\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"representing-multiple-values"},(0,o.kt)("strong",{parentName:"h2"},"Representing multiple values")),(0,o.kt)("p",null,"\ucf54\ub4e4\ub9b0\uc5d0\uc11c\ub294 Collection\uc73c\ub85c \uc5ec\ub7ec \uac12\uc744 \ub098\ud0c0\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, ",(0,o.kt)("inlineCode",{parentName:"p"},"simple()")," \uc774\ub77c\ub294 \ud568\uc218\uc5d0\uc11c 3\uac1c\uc758 \uc22b\uc790\ub97c \uac00\uc9c4 List\ub97c \ubc18\ud658\ud558\uace0 foreach\ub97c \uc0ac\uc6a9\ud558\uc5ec \ucd9c\ub825 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun simple(): List<Int> = listOf(1, 2, 3)\n \nfun main() {\n    simple().forEach { value -> println(value) } \n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"1\n2\n3\n")),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"sequences"},(0,o.kt)("strong",{parentName:"h3"},"Sequences")),(0,o.kt)("p",null,"\ub9cc\uc57d CPU \ube14\ub85c\ud0b9 \ucf54\ub4dc\ub85c \uc22b\uc790\ub97c \uc5f0\uc0b0\ud55c\ub2e4\uba74, ",(0,o.kt)("inlineCode",{parentName:"p"},"Sequence"),"\ub97c \uc774\uc6a9\ud574 \ub098\ud0c0\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun simple(): Sequence<Int> = sequence { // sequence builder\n    for (i in 1..3) {\n        Thread.sleep(100) // pretend we are computing it\n        yield(i) // yield next value\n    }\n}\n\nfun main() {\n    simple().forEach { value -> println(value) } \n}\n")),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"suspending-functions"},(0,o.kt)("strong",{parentName:"h3"},"Suspending functions")),(0,o.kt)("p",null,"\uc704\uc758 \uc608\uc81c\ub4e4\uc740 \uba54\uc778 \uc2a4\ub808\ub4dc\ub97c \ucc28\ub2e8\ud569\ub2c8\ub2e4. suspend\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud568\uc218\ub97c \ube44\ub3d9\uae30 \ucf54\ub4dc\ub85c \ubcc0\ud658 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"suspend fun simple(): List<Int> {\n    delay(1000) // pretend we are doing something asynchronous here\n    return listOf(1, 2, 3)\n}\n\nfun main() = runBlocking<Unit> {\n    simple().forEach { value -> println(value) } \n}\n")),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"flows"},"Flows"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"List<Int>"),"\ub97c \ub9ac\ud134 \ud0c0\uc785\uc73c\ub85c \uc0ac\uc6a9\ud558\uba74, \ubaa8\ub4e0 \uac12\uc744 \ud55c\ubc88\uc5d0 \ubc18\ud658\ud560 \uc218 \ubc16\uc5d0 \uc5c6\uc2b5\ub2c8\ub2e4.  ",(0,o.kt)("inlineCode",{parentName:"p"},"Sequence<Int>"),"\uc758 \ube44\ub3d9\uae30 \ud615\ud0dc\uc778 \ube44\ub3d9\uae30 \uc2a4\ud2b8\ub9bc ",(0,o.kt)("inlineCode",{parentName:"p"},"Flow<Int>")," \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun main() = runBlocking {\n\n    // Launch a concurrent coroutine to check if the main thread is blocked\n    launch {\n        for (k in 1..3) {\n            println("I\'m not blocked $k")\n            delay(100)\n        }\n    }\n\n    FlowPractice().simple().collect { value ->\n        println(value)\n    }\n\n}\n\nclass FlowPractice {\n    fun simple(): Flow<Int> = flow { // flow builder\n        for (i in 1..3) {\n            delay(100) // pretend we are doing something useful here\n            emit(i) // emit next value\n        }\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"I'm not blocked 1\n1\nI'm not blocked 2\n2\nI'm not blocked 3\n3\n")),(0,o.kt)("p",null,"Flow\uc640 \ub2e4\ub978 \uc608\uc81c\uc758 \ucc28\uc774\uc810"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Flow\ub97c \ub9cc\ub4dc\ub294 \ube4c\ub354 \ud568\uc218\ub294 ",(0,o.kt)("inlineCode",{parentName:"li"},"flow"),"\uc774\ub2e4."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"flow { ... }")," \ube4c\ub354\ube14\ub85d \ub0b4\ubd80 \ucf54\ub4dc\ub294 ",(0,o.kt)("inlineCode",{parentName:"li"},"suspend")," \ud560 \uc218 \uc788\ub2e4."),(0,o.kt)("li",{parentName:"ul"},"flow\ub97c \ub9ac\ud134\ud558\ub294 simple \ud568\uc218 \uc790\uccb4\ub294 suspend\ub97c \ud45c\uc2dc\ud560 \ud544\uc694\ub294 \uc5c6\ub2e4."),(0,o.kt)("li",{parentName:"ul"},"flow\uc5d0\uc11c \uac12\uc744 \uc804\ub2ec\ud560 \ub54c\ub294 ",(0,o.kt)("inlineCode",{parentName:"li"},"emit")," \ud568\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4."),(0,o.kt)("li",{parentName:"ul"},"flow\uc5d0\uc11c \uac12\uc744 \uc218\uc9d1\ud560 \ub54c\ub294 ",(0,o.kt)("inlineCode",{parentName:"li"},"collect")," \ud568\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4.")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"flow \uc608\uc81c\uc5d0\uc11c delay \ub300\uc2e0\uc5d0 Thread.sleep\uc744 \uc0ac\uc6a9\ud558\uba74 \uba54\uc778 \uc4f0\ub808\ub4dc\uac00 \uc911\ub2e8\ub418\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\ub2e4."))),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"flow-are-cold"},"Flow are cold"),(0,o.kt)("p",null,"Flow\ub294 sequences\uc640 \uac19\uc774 cold stream \uc785\ub2c8\ub2e4. \uc544\ub798 \ucf54\ub4dc\uc5d0\uc11c flow builder\ub294 collect \ud558\uae30\uc804\uae4c\uc9c0 \ub3d9\uc791\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun simple(): Flow<Int> = flow { \n    println("Flow started")\n    for (i in 1..3) {\n        delay(100)\n        emit(i)\n    }\n}\n\nfun main() = runBlocking<Unit> {\n    println("Calling simple function...")\n    val flow = simple()\n    println("Calling collect...")\n    flow.collect { value -> println(value) } \n    println("Calling collect again...")\n    flow.collect { value -> println(value) } \n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"Calling simple function...\nCalling collect...\nFlow started\n1\n2\n3\nCalling collect again...\nFlow started\n1\n2\n3\n")),(0,o.kt)("p",null,"\uc911\uc694\ud55c \ud55c\uac00\uc9c0 \uc544\uc720\ub294 flow\ub97c \ubc18\ud658\ud558\ub294 ",(0,o.kt)("inlineCode",{parentName:"p"},"simple")," \ud568\uc218\uac00 ",(0,o.kt)("inlineCode",{parentName:"p"},"suspend")," \ud568\uc218\uac00 \uc544\ub2d9\ub2c8\ub2e4. simple \ud568\uc218\uc758 \uc218\ud589\uc740 \ube60\ub974\uac8c \ubc18\ud658\ud558\uace0 \uc544\ubb34\uac83\ub3c4 \uae30\ub2e4\ub9ac\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. flow\ub294 \ud56d\uc0c1 ",(0,o.kt)("inlineCode",{parentName:"p"},"collect"),"\ub97c \ud638\ucd9c \ud560 \ub54c\ub9c8\ub2e4 \uc2dc\uc791\ud558\uace0, \uc7ac \ud638\ucd9c\ud558\ub294 \uacbd\uc6b0\uc5d0\ub3c4 \ub2e4\uc2dc \uc2dc\uc791\ub418\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"flow-cancellation-basics"},(0,o.kt)("strong",{parentName:"h2"},"Flow cancellation basics")),(0,o.kt)("p",null,"Flow\ub294 \ucf54\ub8e8\ud2f4\uc758 \uc77c\ubc18\uc801\uc778 cooperative cancellation\uc744 \ub530\ub985\ub2c8\ub2e4. \ud3c9\uc18c\ucc98\ub7fc flow\uac00 \uc911\ub2e8\ub418\uba74 flow\uc758 \ub0b4\ubd80\uc758 delay\uac19\uc740 suspend \ud568\uc218 \uc5ed\uc2dc \ucde8\uc18c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc608\uc81c\uc5d0\uc11c ",(0,o.kt)("inlineCode",{parentName:"p"},"withTimeoutOrNull"),"\ub97c \ud65c\uc6a9\ud55c \uc911\ub2e8\ud558\ub294 \ubc29\ubc95\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun simple(): Flow<Int> = flow { \n    for (i in 1..3) {\n        delay(100)          \n        println("Emitting $i")\n        emit(i)\n    }\n}\n\nfun main() = runBlocking<Unit> {\n    withTimeoutOrNull(250) { // Timeout after 250ms \n        simple().collect { value -> println(value) } \n    }\n    println("Done")\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"Emitting 1\n1\nEmitting 2\n2\nDone\n")),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"flow-builders"},(0,o.kt)("strong",{parentName:"h2"},"Flow builders")),(0,o.kt)("p",null,"flow { ... }\ub294 \uac00\uc7a5 \uae30\ubcf8\uc801\uc778 \uac83 \uc911 \ud558\ub098\uc785\ub2c8\ub2e4. flow\ub97c \ub354 \uc27d\uac8c \uc120\uc5b8 \ud560 \uc218 \uc788\ub294 \ub2e4\ub978 \ube4c\ub354\ub3c4 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"flowOf")," \ube4c\ub354\ub294 \uace0\uc815\ub41c \uac12\uc758 set\ub97c \ubc18\ud658\ud558\ub294 flow\ub97c \ub9cc\ub4ed\ub2c8\ub2e4."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".asFlow()")," \ud655\uc7a5 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc591\ud55c \uceec\ub809\uc158 \ubc0f \uc2dc\ud000\uc2a4\ub97c flow\uc73c\ub85c \ubcc0\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"flowOf(1, 2, 3).collect { value -> println(value) }\n\n// Convert an integer range to a flow\n(1..3).asFlow().collect { value -> println(value) }\n")),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"intermediate-flow-operators"},(0,o.kt)("strong",{parentName:"h2"},"Intermediate flow operators")),(0,o.kt)("p",null,"Flow\ub294 Collection\uacfc Sequences\ucc98\ub7fc \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubcc0\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc911\uac04 \uc5f0\uc0b0\uc790\ub294 \uc5c5\uc2a4\ud2b8\ub9bc flow\uc5d0 \uc801\uc6a9\ub418\uace0 \ub2e4\uc6b4\uc2a4\ud2b8\ub9bc flow\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.  \uc5f0\uc0b0\uc790 \uc5ed\uc2dc flow\ucc98\ub7fc cold\ud558\uc5ec \ubcc0\ud658\ub9cc\uc73c\ub85c\ub294 \uc2e4\ud589\uc2dc\ud0a4\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc5f0\uc0b0\uc790\ub294 \uc911\ub2e8 \ud568\uc218\ub85c \uc120\uc5b8\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \ubcc0\ud658\ub41c flow\ub97c \ubc18\ud658\ud558\ub294 \uac83\uc774 \ube60\ub974\uac8c \ub3d9\uc791\ud569\ub2c8\ub2e4."),(0,o.kt)("p",null,"\uae30\ubcf8\uc801\uc73c\ub85c \uce5c\uc219\ud55c \uc5f0\uc0b0\uc790\ub294 ",(0,o.kt)("inlineCode",{parentName:"p"},"map"),"\uacfc ",(0,o.kt)("inlineCode",{parentName:"p"},"filter"),"\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc2dc\ud000\uc2a4\uc640\uc758 \uc911\uc694\ud55c \ucc28\uc774\uc810\uc740 \uc5f0\uc0b0\uc790 \ube14\ub85d \ub0b4\ubd80\uc5d0\uc11c \uc911\ub2e8\ud568\uc218\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("p",null,"\uc608\ub97c \ub4e4\uc5b4 \uc7a5\uae30 \uc218\ud589\ud558\ub294 suspend \ud568\uc218\uac00 \uc788\uc744 \ub54c flow\uc5d0 map \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \uacb0\uacfc\uc5d0 \ub9e4\ud551\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'suspend fun performRequest(request: Int): String {\n    delay(1000) // imitate long-running asynchronous work\n    return "response $request"\n}\n\nfun main() = runBlocking<Unit> {\n    (1..3).asFlow() // a flow of requests\n        .map { request -> performRequest(request) }\n        .collect { response -> println(response) }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"response 1\nresponse 2\nresponse 3\n")),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"transform-operator"},(0,o.kt)("strong",{parentName:"h2"},"Transform operator")),(0,o.kt)("p",null,"Flow \ubcc0\ud658 \uc5f0\uc0b0\uc790 \uac00\uc6b4\ub370 \uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \uac83 \uc911 \ud558\ub098\ub294 ",(0,o.kt)("inlineCode",{parentName:"p"},"tranform"),"\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 map\uacfc filter\ucc98\ub7fc \uc27d\uac8c \ubcc0\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ubcf4\ub2e4 \ubcf5\uc7a1\ud55c \ubcc0\ud658\uc744 \uad6c\ud604\ud558\ub294\ub370 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("p",null,"\uc608\ub97c \ub4e4\uc5b4 ",(0,o.kt)("inlineCode",{parentName:"p"},"transform"),"\uc744 \uc0ac\uc6a9\ud558\uc5ec \ube44\ub3d9\uae30\uc131 \uc7a5\uae30 \ub85c\uc9c1\uc744 \uc2dc\uc791\ud558\uae30 \uc804\uc5d0 \ubb38\uc790\uc5f4\uc744 \ub0b4\ubcf4\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},' (1..3).asFlow() // a flow of requests\n    .transform { request ->\n        emit("Making request $request") \n        emit(performRequest(request)) \n    }\n    .collect { response -> println(response) }\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"Making request 1\nresponse 1\nMaking request 2\nresponse 2\nMaking request 3\nresponse 3\n")),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"size-limiting-operators"},(0,o.kt)("strong",{parentName:"h2"},"Size-limiting operators")),(0,o.kt)("p",null,"take\uc640 \uac19\uc740 \ud06c\uae30 \uc81c\ud55c \uc911\uac04 \uc5f0\uc0b0\uc790\ub294 \uc81c\ud55c\ub41c \ud06c\uae30\uc5d0 \ub3c4\ub2ec\ud558\uba74 flow\uc758 \uc2e4\ud589\uc744 \ucde8\uc18c\ud569\ub2c8\ub2e4. \ucf54\ub8e8\ud2f4\uc758 \ucde8\uc18c\ub294 \ud56d\uc0c1 Exception\uc744 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c try-catch\uc640 \uac19\uc740 \uc790\uc6d0 \uad00\ub9ac \ud568\uc218\uac00 \ub3d9\uc791\ub429\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},' fun numbers(): Flow<Int> = flow {\n    try {                          \n        emit(1)\n        emit(2) \n        println("This line will not execute")\n        emit(3)    \n    } finally {\n        println("Finally in numbers")\n    }\n}\n\nfun main() = runBlocking<Unit> {\n    numbers() \n        .take(2) // take only the first two\n        .collect { value -> println(value) }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"1\n2\nFinally in numbers\n")),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"terminal-flow-operators"},(0,o.kt)("strong",{parentName:"h2"},"Terminal flow operators")),(0,o.kt)("p",null,"flow\uc758 \ub2e8\ub9d0 \uc5f0\uc0b0\uc790\ub294 collection\uc744 \uc911\ub2e8 \ud568\uc218\ub85c \uc2e4\ud589\ud569\ub2c8\ub2e4. collect \uc5f0\uc0b0\uc790\ub294 \uac00\uc7a5 \uae30\ucd08\uc801\uc778 \uac83 \uc911 \ud558\ub098\uc9c0\ub9cc, \ub354 \uc27d\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ub2e8\ub9d0 \uc5f0\uc0b0\uc790\ub3c4 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"toList\uc640 toSet\uc744 \uc774\uc6a9\ud574 \ub2e4\uc591\ud55c \uceec\ub809\uc158\uc73c\ub85c \ubcc0\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("li",{parentName:"ul"},"first \uc5f0\uc0b0\uc790\ub294 \ud55c \ubc88\ub9cc \uc804\ub2ec \ubc1b\uc744 \uc218 \uc788\uac8c \ubcf4\uc7a5\ud569\ub2c8\ub2e4."),(0,o.kt)("li",{parentName:"ul"},"reduce\uc640 fold\ub97c \uc774\uc6a9\ud558\uc5ec \ud558\ub098\uc758 \uac12\uc73c\ub85c \uc904\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val sum = (1..5).asFlow()\n    .map { it * it } // squares of numbers from 1 to 5                           \n    .reduce { a, b -> a + b } // sum them (terminal operator)\nprintln(sum)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"55\n")),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"flows-are-sequential"},(0,o.kt)("strong",{parentName:"h2"},"Flows are sequential")),(0,o.kt)("p",null,"\uac01\uac01\uc758 flow \uceec\ub809\uc158\uc740 \ub2e4\uc911 flow\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud2b9\uc218\ud55c \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \ud55c \uc21c\ucc28\uc801\uc73c\ub85c \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \uceec\ub809\uc158\uc740 \ub2e8\ub9d0 \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub8e8\ud2f4\uc5d0\uc11c \uc9c1\uc811 \ub3d9\uc791\ud569\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c \uc0c8\ub85c\uc6b4 \ucf54\ub8e8\ud2f4\uc73c\ub85c \ub3d9\uc791\ud558\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \uac01 \uac12\uc758 \uc804\ub2ec\uc740 \uc5c5\uc2a4\ud2b8\ub9bc\uc5d0\uc11c \ub2e4\uc6b4\uc2a4\ud2b8\ub9bc\uc73c\ub85c \ubaa8\ub4e0 \uc911\uac04 \uc5f0\uc0b0\uc790\uc5d0 \uc758\ud574 \ucc98\ub9ac\ub41c \ub2e4\uc74c \ud130\ubbf8\ub110 \uc5f0\uc0b0\uc790\uc5d0 \uc804\ub2ec\ub429\ub2c8\ub2e4."),(0,o.kt)("p",null,"\ub2e4\uc74c \uc608\uc81c\ub294 \uc9dd\uc218\ub97c filter\ud558\uc5ec map\uc744 \uc774\uc6a9\ud574 String\uc73c\ub85c \uc804\ub2ec\ud569\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'(1..5).asFlow()\n    .filter {\n        println("Filter $it")\n        it % 2 == 0              \n    }              \n    .map { \n        println("Map $it")\n        "string $it"\n    }.collect { \n        println("Collect $it")\n    }\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"Filter 1\nFilter 2\nMap 2\nCollect string 2\nFilter 3\nFilter 4\nMap 4\nCollect string 4\nFilter 5\n")),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"flow-context"},(0,o.kt)("strong",{parentName:"h2"},"Flow context")),(0,o.kt)("p",null,"flow\uc758 collection\uc740 \ud56d\uc0c1 coroutine\uc758 context \uc548\uc5d0\uc11c \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 simple flow\uac00 \uc788\uc744 \ub54c,"),(0,o.kt)("p",null,"\ub2e4\uc74c \ucf54\ub4dc\ub294 flow\uc5d0 \uad6c\ud604\ud55c \uc138\ubd80 \uc0ac\ud56d\uc5d0 \uc0c1\uad00 \uc5c6\uc774 \uc791\uc131\uc790\uac00 \uba85\uc2dc\ud55c context \uc548\uc5d0\uc11c \uc2e4\ud589\ub429\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"withContext(context) {\n    simple().collect { value ->\n        println(value) // run in the specified context\n    }\n}\n")),(0,o.kt)("p",null,"\uc774 flow\uc758 \uc18d\uc131\uc740 \uc720\uc9c0\ub41c context\uc5d0 \uc758\ud574 \ud638\ucd9c\ub429\ub2c8\ub2e4."),(0,o.kt)("p",null,"\uadf8\ub798\uc11c \uae30\ubcf8\uc801\uc73c\ub85c ",(0,o.kt)("inlineCode",{parentName:"p"},"flow { ... }")," \ube4c\ub354\uc758 \ub0b4\ubd80 \ucf54\ub4dc\ub294 flow\uc758 collector\uac00 \uc81c\uacf5\ud558\ub294 context \uc548\uc5d0\uc11c \uc2e4\ud589\ub429\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc544\ub798 simple \ud568\uc218\uc5d0\uc11c \ud638\ucd9c\ud558\uac70\ub098 \uc804\ub2ec\ud558\ub294 \uad6c\ud604\uc740 \uc4f0\ub808\ub4dc\ub97c \uace0\ub824\ud574\uc57c \ud569\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun simple(): Flow<Int> = flow {\n    log("Started simple flow")\n    for (i in 1..3) {\n        emit(i)\n    }\n}  \n\nfun main() = runBlocking<Unit> {\n    simple().collect { value -> log("Collected $value") } \n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"[main @coroutine#1] Started simple flow\n[main @coroutine#1] Collected 1\n[main @coroutine#1] Collected 2\n[main @coroutine#1] Collected 3\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"simple().collect"),"\ub294 \uba54\uc778 \uc4f0\ub808\ub4dc\uc5d0\uc11c \ud638\ucd9c\ub418\uc5c8\uace0, flow builder\uc758 \ub0b4\ubd80 \uad6c\ud604\ub3c4 \uba54\uc778 \uc4f0\ub808\ub4dc\uc5d0\uc11c \ub3d9\uc791\ud558\uc600\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 \ube60\ub974\uac8c \uc2e4\ud589\ud558\uac70\ub098 \ube44\ub3d9\uae30 \ucf54\ub4dc\uc5d0 \ub300\ud55c \uae30\ucd08\uc774\uba70, \uc2e4\ud589 context\uc640 \ud638\ucd9c\uc790\uc758 \ucc28\ub2e8\uc744 \uc2e0\uacbd\uc4f0\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4."),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"wrong-emission-withcontext"},(0,o.kt)("strong",{parentName:"h3"},"Wrong emission withContext")),(0,o.kt)("p",null,"\uc7a5\uae30 \uc2e4\ud589\ud558\uc5ec CPU\ub97c \uc18c\ubaa8\ud558\ub294 \ucf54\ub4dc\ub294 Dispatchers.Default\uc758 context \uc0ac\uc6a9\uc774 \ud544\uc694\ud558\uace0, UI\ub97c \uac31\uc2e0\ud558\ub294 \ucf54\ub4dc\ub294 Dispatchers.Main\uc758 context\ub97c \uc0ac\uc6a9\ud574\uc57c \ud560 \ud544\uc694\uac00 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c withContext\ub294 coroutine\uc5d0\uc11c context\ub97c \ubcc0\uacbd\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub418\ub294\ub370, ",(0,o.kt)("inlineCode",{parentName:"p"},"flow { ... }")," \ube4c\ub354\uc758 \ub0b4\ubd80 \ucf54\ub4dc\ub294 context \uc18d\uc131\uc744 \uc720\uc9c0\uac8c\ub418\uace0 \ub2e4\ub978 context\uc5d0\uc11c emit\uc758 \ud638\ucd9c\uc740 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"}," fun simple(): Flow<Int> = flow {\n    // The WRONG way to change context for CPU-consuming code in flow builder\n    kotlinx.coroutines.withContext(Dispatchers.Default) {\n        for (i in 1..3) {\n            Thread.sleep(100) // pretend we are computing it in CPU-consuming way\n            emit(i) // emit next value\n        }\n    }\n}\n\nfun main() = runBlocking<Unit> {\n    simple().collect { value -> println(value) } \n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'Exception in thread "main" java.lang.IllegalStateException: Flow invariant is violated:\n        Flow was collected in [CoroutineId(1), "coroutine#1":BlockingCoroutine{Active}@5511c7f8, BlockingEventLoop@2eac3323],\n        but emission happened in [CoroutineId(1), "coroutine#1":DispatchedCoroutine{Active}@2dae0000, Dispatchers.Default].\n        Please refer to \'flow\' documentation or use \'flowOn\' instead\n    at ...\n')),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"flowon-operator"},(0,o.kt)("strong",{parentName:"h3"},"flowOn operator")),(0,o.kt)("p",null,"\uc608\uc678\uc801\uc73c\ub85c flowOn \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec flow\ub97c \uc804\ub2ec\ud558\ub294\ub370 \uc0ac\uc6a9\ud558\ub294 context\ub97c \ubcc0\uacbd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc758 \ucf54\ub4dc\uc5d0\uc11c flow\uc758 context \ubcc0\uacbd\uc758 \uc62c\ubc14\ub978 \ucf54\ub4dc\ub97c \ubcfc \uc218 \uc788\uace0, \uc4f0\ub808\ub4dc\uac00 \uc5b4\ub5bb\uac8c \ubcc0\ud654\ud558\ub294\uc9c0 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun simple(): Flow<Int> = flow {\n    for (i in 1..3) {\n        Thread.sleep(100) // pretend we are computing it in CPU-consuming way\n        log("Emitting $i")\n        emit(i) // emit next value\n    }\n}.flowOn(Dispatchers.Default) // RIGHT way to change context for CPU-consuming code in flow builder\n\nfun main() = runBlocking<Unit> {\n    simple().collect { value ->\n        log("Collected $value") \n    } \n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"[DefaultDispatcher-worker-1 @coroutine#2] Emitting 1\n[main @coroutine#1] 1\n[DefaultDispatcher-worker-1 @coroutine#2] Emitting 2\n[main @coroutine#1] 2\n[DefaultDispatcher-worker-1 @coroutine#2] Emitting 3\n[main @coroutine#1] 3\n")),(0,o.kt)("p",null,"\uc774 \uacb0\uacfc\uc5d0\uc11c ",(0,o.kt)("inlineCode",{parentName:"p"},"flow{ ... }")," \ube14\ub85d\uc740 \ubc31\uadf8\ub77c\uc6b4\ub4dc \uc4f0\ub808\ub4dc\uc5d0\uc11c \ub3d9\uc791\ud558\uace0 collection\uc740 \uba54\uc778 \uc4f0\ub808\ub4dc\uc5d0\uc11c \ub3d9\uc791 \ud55c\uac83\uc744 \uc8fc\ubaa9\ud558\uc138\uc694."),(0,o.kt)("p",null,"\ub610\ub2e4\ub978 \uc8fc\ubaa9\ud560\ub9cc\ud55c \uc810\uc740 flowOn \uc5f0\uc0b0\uc790\ub294 flow\uc758 \uae30\ubcf8\uc801\uc778 \uc21c\uc11c\ub300\ub85c \uc804\ud658\ub41c \uac83\uc785\ub2c8\ub2e4. collection\uc740 coroutine#1\uc5d0\uc11c \ubc1c\uc0dd\ud558\uace0, \uc804\ub2ec\uc740 coroutine#2\ub85c \ubc1c\uc0dd\ud558\ub294 \ub3d9\uc2dc\uc5d0 \uac01\uac01 \ub2e4\ub978 \uc4f0\ub808\ub4dc\uc5d0\uc11c \ub3d9\uc791\ud558\uc600\uc2b5\ub2c8\ub2e4. flowOn \uc5f0\uc0b0\uc790\ub294 CoroutineDispatcher\uc758 \ubcc0\uacbd\uc774 \uc788\uc744 \ub54c, upstream flow\uc5d0 \ub300\ud55c \ub610\ub2e4\ub978 \ucf54\ub8e8\ud2f4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4."),(0,o.kt)("p",null,"flowOn\uc774\ub354\ub77c\ub3c4 \uac19\uc740 Dispatchers\uc778 \uacbd\uc6b0 \ub2e4\ub978 \ucf54\ub8e8\ud2f4\uc744 \uc0dd\uc131\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun main() = runBlocking {\n\n    withContext(Dispatchers.Default){\n        FlowPractice().simple().collect { value ->\n            log(value)\n        }\n    }\n\n}\n\nclass FlowPractice {\n    fun simple(): Flow<Int> = flow {\n        for (i in 1..3) {\n            Thread.sleep(100) // pretend we are computing it in CPU-consuming way\n            log("Emitting $i")\n            emit(i) // emit next value\n        }\n    }.flowOn(Dispatchers.Default) // RIGHT way to change context for CPU-consuming code in flow builder\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"[DefaultDispatcher-worker-1 @coroutine#1] Emitting 1\n[DefaultDispatcher-worker-1 @coroutine#1] 1\n[DefaultDispatcher-worker-1 @coroutine#1] Emitting 2\n[DefaultDispatcher-worker-1 @coroutine#1] 2\n[DefaultDispatcher-worker-1 @coroutine#1] Emitting 3\n[DefaultDispatcher-worker-1 @coroutine#1] 3\n")),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"buffering"},(0,o.kt)("strong",{parentName:"h2"},"Buffering")),(0,o.kt)("p",null,"flow\uc758 \uc77c\ubd80\ubd84\uc744 \ub2e4\ub978 \ucf54\ub8e8\ud2f4\uc5d0\uc11c \ub3d9\uc791\ud558\ub294 \uac83\uc740 \uc7a5\uae30\uc801\uc73c\ub85c \uc2e4\ud589\ub418\ub294 \ube44\ub3d9\uae30 \uc791\uc5c5\uc5d0\uc11c \uc0ac\uc6a9\ud558\uba74 \uc804\uccb4 \uc2e4\ud589\uc2dc\uac04\uc5d0 \ub3c4\uc6c0\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4. \uc608\ub97c\ub4e4\uc5b4 flow\uc5d0\uc11c \uac12 \uc804\ub2ec\uc774 100ms\ub9c8\ub2e4 \ubc1c\uc0dd\ud558\ub294\uace0 collector \ub0b4\ubd80\uc758 \ucf54\ub4dc\uac00 300ms\ub9cc\ud07c \uc9c0\uc5f0\ub418\ub294 \uacbd\uc6b0 \uace0\ub824\ud574\ubcfc\ub9cc \ud569\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun main() = runBlocking {\n    val time = measureTimeMillis {\n        FlowPractice().simple().collect { value ->\n            delay(300) // pretend we are processing it for 300 ms\n            log(value)\n        }\n    }\n    println("Collected in $time ms")\n}\n\nclass FlowPractice {\n    fun simple(): Flow<Int> = flow {\n        for (i in 1..3) {\n            delay(100) // pretend we are asynchronously waiting 100 ms\n                        log("delay $i")\n            emit(i) // emit next value\n        }\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"[main @coroutine#1] delay 1\n[main @coroutine#1] 1\n[main @coroutine#1] delay 2\n[main @coroutine#1] 2\n[main @coroutine#1] delay 3\n[main @coroutine#1] 3\nCollected in 1259 ms\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"buffer")," \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc804\ub2ec \ucf54\ub4dc\uc640 collect \ucf54\ub4dc\ub97c \uac01\uc790 \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("p",null,"\u2757Collect \uc5f0\uc0b0\uc744 \uae30\ub2e4\ub9ac\uc9c0 \uc54a\uace0 \ub2e4\uc74c flow \ub0b4\ubd80 \ucf54\ub4dc\uac00 \uacc4\uc18d \ub3d9\uc791\ud569\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun main() = runBlocking {\n\n    val time = measureTimeMillis {\n        FlowPractice().simple()\n            .buffer() // buffer emissions, don\'t wait\n            .collect { value ->\n                delay(300) // pretend we are processing it for 300 ms\n                log(value)\n            }\n    }\n    println("Collected in $time ms")\n\n}\n\nclass FlowPractice {\n    fun simple(): Flow<Int> = flow {\n        for (i in 1..3) {\n            delay(100) // pretend we are asynchronously waiting 100 ms\n            log("delay $i")\n            emit(i) // emit next value\n        }\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"[main @coroutine#2] delay 1\n[main @coroutine#2] delay 2\n[main @coroutine#2] delay 3\n[main @coroutine#1] 1\n[main @coroutine#1] 2\n[main @coroutine#1] 3\nCollected in 1089 ms\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"flowOn \uc5f0\uc0b0\uc790\uc5d0\uc11c CoroutineDispatcher\uac00 \ubc14\ub014 \ub54c \ub3d9\uc791\ud558\ub294 \ubc84\ud37c\ub9c1 \uba54\ucee4\ub2c8\uc998\uacfc \ub3d9\uc77c\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc buffering \uc5f0\uc0b0\uc790\ub294 \uc2e4\ud589 context\uac00 \ubcc0\uacbd\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4."))),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"conflation"},(0,o.kt)("strong",{parentName:"h3"},"Conflation")),(0,o.kt)("p",null,"\uc5f0\uc0b0\uc758 \ubd80\ubd84\uc801\uc778 \uacb0\uacfc\ub97c \uc804\ub2ec\ud558\uac70\ub098 \uc5f0\uc0b0\uc758 \uc0c1\ud0dc\ub97c \uc5c5\ub370\uc774\ud2b8\ub97c \uc5f0\uc18d\uc801\uc73c\ub85c \uc804\ub2ec\ud558\ub294 \uacbd\uc6b0 \uac01 \uac12\uc744 \ucc98\ub9ac\ud560 \ud544\uc694\uac00 \uc5c6\uc774 \ucd5c\uadfc \uac12\ub9cc \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 ",(0,o.kt)("inlineCode",{parentName:"p"},"conflate")," \uc5f0\uc0b0\uc790\ub294 collector\uc758 \ucc98\ub9ac\uac00 \ub290\ub9b0 \uacbd\uc6b0 \uc911\uac04\uac12\uc744 \uc0dd\ub7b5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("p",null,"\u2757\ucc98\ub9ac\ud574\uc57c \ud558\ub294 \uac12 \uc911 \ub2e4\uc74c \uac12\uc744 \uc774\ubbf8 \ubc1b\uc744 \uc218 \uc788\ub294 \uc0c1\ud0dc\uc778 \uacbd\uc6b0 \uc0dd\ub7b5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val time = measureTimeMillis {\n    simple()\n        .conflate() // conflate emissions, don\'t process each one\n        .collect { value -> \n            delay(300) // pretend we are processing it for 300 ms\n            println(value) \n        } \n}   \nprintln("Collected in $time ms")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"[main] delay 1\n[main] delay 2\n[main] delay 3\n[main] 1\n[main] 3\nCollected in 760 ms\n")),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"processing-the-latest-value"},(0,o.kt)("strong",{parentName:"h3"},"Processing the latest value")),(0,o.kt)("p",null,"Conflation\uc740 flow\uc640 collector \ub458 \ub2e4 \ub290\ub9b4 \ub54c \ube60\ub974\uac8c \ud558\ub294 \ubc29\ubc95 \uc911 \ud558\ub098\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 \uc804\ub2ec\ud558\ub294 \uac12\uc744 \ubc84\ub9ac\ub294 \uac83 \uc785\ub2c8\ub2e4. \ub290\ub9b0 collector \uc5f0\uc0b0\uc744 \ucde8\uc18c\ud558\uace0 \uc0c8\ub85c\uc6b4 \uac12\uc744 \uc804\ub2ec\ud558\ub294 \ub2e4\ub978 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. ",(0,o.kt)("inlineCode",{parentName:"p"},"xxxLatest")," \uc5f0\uc0b0 \ubaa8\uc74c\uc740  ",(0,o.kt)("inlineCode",{parentName:"p"},"xxx")," \uc5f0\uc0b0\uc758 \ub85c\uc9c1\uc744 \uc218\ud589 \uc911 \uc0c8 \uac12\uc774 \ubc1c\uc0dd\ud558\ub294 \uacbd\uc6b0 \uc911\ub2e8\uc2dc\ud0b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val time = measureTimeMillis {\n    simple()\n        .collectLatest { value -> // cancel & restart on the latest value\n            println("Collecting $value") \n            delay(300) // pretend we are processing it for 300 ms\n            println("Done $value") \n        } \n}   \nprintln("Collected in $time ms")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"[main] delay 1\n[main] delay 2\n[main] delay 3\n[main] 3\nCollected in 680 ms\n")),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"composing-multiple-flows"},(0,o.kt)("strong",{parentName:"h2"},"Composing multiple flows")),(0,o.kt)("p",null,"\ub2e4\uc911 flow\ub97c \uad6c\uc131\ud558\ub294 \uc5ec\ub7ec \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"zip"},(0,o.kt)("strong",{parentName:"h3"},"Zip")),(0,o.kt)("p",null,"\ucf54\ud2c0\ub9b0 \uae30\ubcf8 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc2dc\ud000\uc2a4\uc758 zip\uac19\uc740 \ud655\uc7a5 \ud568\uc218 \ucc98\ub7fc flow\uc5d0\ub3c4 \ub450\uac1c\uc758 flow\ub97c \ubcd1\ud569\ud558\uc5ec \uc804\ub2ec\ud558\ub294 ",(0,o.kt)("inlineCode",{parentName:"p"},"zip")," \uc5f0\uc0b0\uc790\uac00 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val nums = (1..3).asFlow() // numbers 1..3\nval strs = flowOf("one", "two", "three") // strings \nnums.zip(strs) { a, b -> "$a -> $b" } // compose a single string\n    .collect { println(it) } // collect and print\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"1 -> one\n2 -> two\n3 -> three\n")),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"combine"},(0,o.kt)("strong",{parentName:"h3"},"Combine")),(0,o.kt)("p",null,"flow\uac00 \ubcc0\uc218 \ub610\ub294 \uc791\uc5c5\uc758 \uac00\uc7a5 \ucd5c\uadfc \uac12\uc744 \uc804\ub2ec\ud558\ub294 \uacbd\uc6b0 \uac12\uc5d0 \ub530\ub77c \uacc4\uc0b0\uc744 \uc218\ud589\ud558\uace0 \uc5c5\uc2a4\ud2b8\ub9bc flow\uc5d0\uc11c \uac12\uc744 \uc804\ub2ec\ud560 \ub54c\ub9c8\ub2e4 \uc774\ub97c \ub2e4\uc2dc \uacc4\uc0b0\ud574\uc57c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc5f0\uc0b0\uc790 \uc9d1\ud569\uc744 ",(0,o.kt)("inlineCode",{parentName:"p"},"combine"),"\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4."),(0,o.kt)("p",null,"\uc608\ub97c \ub4e4\uc5b4, \uc774\uc804 \uc608\uc81c\uc5d0\uc11c \uc22b\uc790\uac00 300ms, \ubb38\uc790\uc5f4\uc740 400ms\ub9c8\ub2e4 \uc804\ub2ec \ub41c\ub2e4\uba74 zip \uc5f0\uc0b0\uc790\ub294 \uc774\uc804\uacfc \uac19\uc740 \uacb0\uacfc\ub97c 400ms\ub9c8\ub2e4 \ucd9c\ub825\ud558\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val nums = (1..3).asFlow().onEach { delay(300) } // numbers 1..3 every 300 ms\nval strs = flowOf("one", "two", "three").onEach { delay(400) } // strings every 400 ms\nval startTime = System.currentTimeMillis() // remember the start time \nnums.zip(strs) { a, b -> "$a -> $b" } // compose a single string with "zip"\n    .collect { value -> // collect and print \n        println("$value at ${System.currentTimeMillis() - startTime} ms from start") \n    }\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"1 -> one at 432 ms from start\n2 -> two at 833 ms from start\n3 -> three at 1243 ms from start\n")),(0,o.kt)("p",null,"\uadf8\ub7ec\ub098 ",(0,o.kt)("inlineCode",{parentName:"p"},"combine")," \uc5f0\uc0b0\uc790\ub294 \ub458 \uc911 \ud558\ub098\uc758 \uac12\uc774 \uc804\ub2ec\ub420 \ub54c\ub9c8\ub2e4 \ucd9c\ub825\ud558\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val nums = (1..3).asFlow().onEach { delay(300) } // numbers 1..3 every 300 ms\nval strs = flowOf("one", "two", "three").onEach { delay(400) } // strings every 400 ms          \nval startTime = System.currentTimeMillis() // remember the start time \nnums.combine(strs) { a, b -> "$a -> $b" } // compose a single string with "combine"\n    .collect { value -> // collect and print \n        println("$value at ${System.currentTimeMillis() - startTime} ms from start") \n    }\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"1 -> one at 452 ms from start\n2 -> one at 651 ms from start\n2 -> two at 854 ms from start\n3 -> two at 952 ms from start\n3 -> three at 1256 ms from start\n")),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"flattening-flows"},(0,o.kt)("strong",{parentName:"h2"},"Flattening flows")),(0,o.kt)("p",null,"flow\ub294 \uc21c\ucc28\uc801\uc778 \uac12\uc744 \ube44\ub3d9\uae30\uc801\uc73c\ub85c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc804\ub2ec\ubc1b\ub294 \uac01 \uac12\uc73c\ub85c \ub2e4\ub978 flow\ub97c \uc2e4\ud589\ud558\ub294 \uac83 \ub610\ud55c \ub9e4\uc6b0 \uc27d\uc2b5\ub2c8\ub2e4."),(0,o.kt)("p",null,"\uc608\ub97c \ub4e4\uc5b4 500ms \uac04\uaca9\uc73c\ub85c \ub450\uac1c\uc758 \ubb38\uc790\uc5f4\uc744 \ubc18\ud658\ud558\ub294 flow \ud568\uc218\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun requestFlow(i: Int): Flow<String> = flow {\n    emit("$i: First")\n    delay(500) // wait 500 ms\n    emit("$i: Second")\n}\n')),(0,o.kt)("p",null,"\uc5ec\uae30\uc11c \ub2e4\uc74c\uacfc \uac19\uc774 3\uac1c\uc758 \uc22b\uc790\ub97c \uc804\ub2ec\ud558\ub294 flow\uc5d0\uc11c \ud638\ucd9c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"(1..3).asFlow().map { requestFlow(it) }\n")),(0,o.kt)("p",null,"\uadf8\ub7f0 \ub2e4\uc74c flow\uc758 flow \uac12(",(0,o.kt)("inlineCode",{parentName:"p"},"Flow<Flow<String>>"),")\uc740 \ucd94\uac00\uc801\uc778 \ucc98\ub9ac\ub97c \uc704\ud55c \ub2e8\uc77c flow\ub85c \ud3c9\ud0c4\ud654 \ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 Collections\uc640 Sequences\uc5d0\ub294 flatten\uacfc flatMap \uc5f0\uc0b0\uc790\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098"),(0,o.kt)("p",null,"flow\ub294 \ube44\ub3d9\uae30\uc801 \ud2b9\uc131\uc73c\ub85c \uc778\ud574 flow\uc758 \ud3c9\ud0c4\ud654 \uc5f0\uc0b0\uc790\ub294 \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c \uc2e4\ud589\ud574\uc57c \ud569\ub2c8\ub2e4."),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"flatmapconcat"},(0,o.kt)("strong",{parentName:"h3"},"flatMapConcat")),(0,o.kt)("p",null,"\ubcd1\ud569 \ubc29\uc2dd\uc740 ",(0,o.kt)("inlineCode",{parentName:"p"},"flatMapConcat"),"\uc774\ub098 ",(0,o.kt)("inlineCode",{parentName:"p"},"flattenConcat")," \uc5f0\uc0b0\uc790\ub85c \uad6c\ud604\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \uc2dc\ud000\uc2a4 \uc5f0\uc0b0\uc790\uc5d0 \uac00\uc7a5 \ube44\uc2b7\ud569\ub2c8\ub2e4. \uc774 \ub54c flow\uc758 \uac01 \uac12 \uc804\ub2ec\uc740 \ub0b4\ubd80 flow\uc758 collect\uac00 \ub05d\ub0a0\ub54c\uae4c\uc9c0 \ub300\uae30\ud55c \ud6c4\uc5d0 \uc2e4\ud589\ub429\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val startTime = System.currentTimeMillis() // remember the start time \n(1..3).asFlow().onEach { delay(100) } // a number every 100 ms \n    .flatMapConcat { requestFlow(it) }                                                                           \n    .collect { value -> // collect and print \n        println("$value at ${System.currentTimeMillis() - startTime} ms from start") \n    }\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"flatMapConcat"),"\uc758 \uc21c\ucc28\uc801\uc778 \ud2b9\uc131\uc740 \ucd9c\ub825\uacfc \uac19\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"1: First at 121 ms from start\n1: Second at 622 ms from start\n2: First at 727 ms from start\n2: Second at 1227 ms from start\n3: First at 1328 ms from start\n3: Second at 1829 ms from start\n")),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"flatmapmerge"},(0,o.kt)("strong",{parentName:"h3"},"flatMapMerge")),(0,o.kt)("p",null,"\ub2e4\ub978 \ud3c9\ud0c4\ud654 \ubc29\uc2dd\uc740 \uc804\ub2ec\ub418\ub294 \ubaa8\ub4e0 flow\ub97c \ub3d9\uc2dc\uc5d0 collect\ud558\uace0 \ub2e8\uc77c flow\ub85c \ubcd1\ud569\ud558\uc5ec \uac00\ub2a5\ud55c \ud55c \ube60\ub974\uac8c \uc804\ub2ec\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 ",(0,o.kt)("inlineCode",{parentName:"p"},"flatMapMerge"),"\ub098 ",(0,o.kt)("inlineCode",{parentName:"p"},"flattenMerge")," \uc5f0\uc0b0\uc790\ub85c \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub450 \uc5f0\uc0b0\uc790 \ubaa8\ub450 collect \ub418\ub294 flow\uc758 \uc218\ub97c \uc81c\ud55c\ud558\ub294 \uc778\uc790\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c\ub294 DEFAULT_CONCURRENCY\uc640(16) \uac19\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val startTime = System.currentTimeMillis() // remember the start time \n(1..3).asFlow().onEach { delay(100) } // a number every 100 ms \n    .flatMapMerge { requestFlow(it) }                                                                           \n    .collect { value -> // collect and print \n        println("$value at ${System.currentTimeMillis() - startTime} ms from start") \n    }\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"1: First at 136 ms from start\n2: First at 231 ms from start\n3: First at 333 ms from start\n1: Second at 639 ms from start\n2: Second at 732 ms from start\n3: Second at 833 ms from start\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("inlineCode",{parentName:"p"},"flatMapMerge"),"\ub294 \ucf54\ub4dc \ube14\ub85d\uc744 \uc21c\ucc28\uc801\uc73c\ub85c \ud638\ucd9c\ud558\uc9c0\ub9cc flow\uc758 \uacb0\uacfc\ub97c \ub3d9\uc2dc\uc5d0 \uc218\uc9d1\ud569\ub2c8\ub2e4. \uc774\ub294 \uc21c\ucc28\uc801\uc73c\ub85c ",(0,o.kt)("inlineCode",{parentName:"p"},"map { requestFlow(it) }"),"\ub97c \uba3c\uc800 \uc218\ud589\ud55c \ub2e4\uc74c ",(0,o.kt)("inlineCode",{parentName:"p"},"flattenMerge"),"\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uacfc \ub3d9\uc77c\ud569\ub2c8\ub2e4."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"(1..3).asFlow().onEach { delay(100) }\n        .map { FlowPractice().requestFlow(it)  }\n        .flattenMerge()\n")),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"flatmaplatest"},(0,o.kt)("strong",{parentName:"h3"},"flatMapLatest")),(0,o.kt)("p",null,"Processing the latest Value \ubb38\ub2e8\uc5d0\uc11c \ubcfc \uc218 \uc788\ub294 collectLatest \uc5f0\uc0b0\uc790\uc640 \ube44\uc2b7\ud55c \ubc29\ubc95\uc73c\ub85c\uc11c, \uc0c8\ub85c\uc6b4 flow\uac00 \uc804\ub2ec\ub418\uba74 \uc774\uc804 flow\ub294 \uc911\ub2e8\ub418\ub294 \ud3c9\ud0c4\ud654 \ubc29\uc2dd\uc785\ub2c8\ub2e4. ",(0,o.kt)("inlineCode",{parentName:"p"},"flatMapLatest")," \uc5f0\uc0b0\uc790\ub85c \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val startTime = System.currentTimeMillis() // remember the start time \n(1..3).asFlow().onEach { delay(100) } // a number every 100 ms \n    .flatMapLatest { requestFlow(it) }                                                                           \n    .collect { value -> // collect and print \n        println("$value at ${System.currentTimeMillis() - startTime} ms from start") \n    }\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"1: First at 142 ms from start\n2: First at 322 ms from start\n3: First at 425 ms from start\n3: Second at 931 ms from start\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("inlineCode",{parentName:"p"},"flatMapLatest"),"\ub294 \uc0c8 \uac12\uc5d0\uc11c \uae30\uc874 \ucf54\ub4dc\ub97c \ucde8\uc18c\ud569\ub2c8\ub2e4. ",(0,o.kt)("inlineCode",{parentName:"p"},"requestFlow")," \uac00 \ube60\ub974\uac8c \ub3d9\uc791\ud558\uac70\ub098 \uc911\ub2e8 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uac70\ub098 \ucde8\uc18c\ud560 \uc218 \uc5c6\ub294 \uacbd\uc6b0 \ub2e4\ub978 \uc608\uc81c\uc640 \uac19\uc740 \ub3d9\uc791\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 ",(0,o.kt)("inlineCode",{parentName:"p"},"delay"),"\uc640 \uac19\uc740 \uc77c\uc2dc \uc911\ub2e8 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\uba74 \ucc28\uc774\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4."))))}u.isMDXComponent=!0}}]);